<!--This Document is generated by GameMaker, if you edit it by hand then you do so at your own risk!-->
<object>
  <spriteName>sprMovingPlatformTest</spriteName>
  <solid>0</solid>
  <visible>-1</visible>
  <depth>0</depth>
  <persistent>0</persistent>
  <parentName>prtMovingPlatformSolid</parentName>
  <maskName>&lt;undefined&gt;</maskName>
  <events>
    <event eventtype="0" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>event_inherited();

timer = 0;
//used for intitializing sound-alike variables when player steps off platform
ysp = 0;
thymer = timer;
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="3" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>event_inherited();

if global.frozen == false &amp;&amp; dead == false
{
    //Top
    if collision_rectangle(bbox_left+1, bbox_top-1, bbox_right-1, bbox_top, prtPlayer, false, false)
    {
        if prtPlayer.bbox_bottom &lt;= bbox_top+abs(yspeed)
        {
            with prtPlayer
            {
                if !place_meeting(x + global.xspeed+other.xspeed + sign(global.xspeed+other.xspeed), y, objSolid)
                &amp;&amp; !((place_meeting(x, y + global.yspeed+other.yspeed + sign(global.yspeed+other.yspeed), objSolid) &amp;&amp; global.yspeed+other.yspeed &lt; 0)
                || (place_meeting(x, y + sign(global.yspeed+other.yspeed), objSolid) &amp;&amp; global.yspeed+other.yspeed &gt; 0)) 
                {
                    var omega0, omega1, gamma, A, alpha, numberOfOscillations;
                    A = 16*400;
                    gamma = 0.005;
                    omega0 = 20*gamma;
                    alpha = 0;
                    numberOfOscillations = 2;
                    omega1 = sqrt(power(omega0,2)-power(gamma,2));
                    other.yspeed = gamma*omega1*A*exp(-gamma*other.timer)*cos(omega1*other.timer-alpha);
                    other.yspeed = round(other.yspeed);
                    other.timer += 1;
                    if (other.timer &gt;= 2*numberOfOscillations*(2*pi/omega1)){
                        other.timer = 2*numberOfOscillations*(2*pi/omega1);
                    }
                    if (other.timer &gt;= numberOfOscillations*(2*pi/omega1)){ 
                        if (other.y == other.ystart){
                            other.yspeed = 0;
                        }
                        
                    }
                    //other.ysp = 0; //used to initialize yspeed during return after player off platform
                    //other.thymer = 0;
                }else{
                    var dify, yMargin;
                    dify = other.y-other.ystart;
                    yMargin = 1;
                    if (abs(dify)&gt;yMargin){
                        other.yspeed = -sign(other.y-other.ystart);
                    }else{
                        other.yspeed = 0;
                        other.timer = 0;
                        other.y = other.ystart;
                    }
                /*
                    var omega0, omega1, gamma, A, alpha, numberOfOscillations;
                    A = 16*400;
                    gamma = 0.005;
                    omega0 = 20*gamma;
                    alpha = 0;
                    numberOfOscillations = 4;
                    omega1 = sqrt(power(omega0,2)-power(gamma,2));
                    //other.yspeed = other.ysp;
                    //other.timer = other.thymer;
                    other.yspeed = round(A*gamma*exp(-gamma*other.timer*sign(other.y-other.ystart)));
                    //other.ysp = other.yspeed;
                    //other.thymer = other.timer;
                */
                }
            }
        }else{
            var dify, yMargin;
            dify = y-ystart;
            yMargin = 1;
            if (abs(dify)&gt;yMargin){
                yspeed = -sign(y-ystart);
            }else{
                yspeed = 0;
                timer = 0;
                y = ystart;
            }
        /*
            var omega0, omega1, gamma, A, alpha, numberOfOscillations;
            A = 16*400;
            gamma = 0.005;
            omega0 = 20*gamma;
            alpha = 0;
            numberOfOscillations = 4;
            omega1 = sqrt(power(omega0,2)-power(gamma,2));
            //yspeed = ysp;
            //timer = thymer;
            yspeed = round(A*gamma*exp(-gamma*timer*sign(y-ystart)));
            //ysp = yspeed;
            //thymer = timer;
        */
        }
    }else{
        var dify, yMargin;
        dify = y-ystart;
        yMargin = 1;
        if (abs(dify)&gt;yMargin){
            yspeed = -sign(y-ystart);
        }else{
            yspeed = 0;
            timer = 0;
            y = ystart;
        }
    /*
        var omega0, omega1, gamma, A, alpha, numberOfOscillations;
        A = 16*400;
        gamma = 0.005;
        omega0 = 20*gamma;
        alpha = 0;
        numberOfOscillations = 4;
        omega1 = sqrt(power(omega0,2)-power(gamma,2));
        //yspeed = ysp;
        //timer = thymer;
        yspeed = round(A*gamma*exp(-gamma*timer*sign(y-ystart)));
        //ysp = yspeed;
        //thymer = timer;
    */
    }
}
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="8" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>draw_line_width_colour(xstart-32,ystart+8,x,y+8,5,c_black, c_black);
draw_line_width_colour(x+sprite_width-5,y+8,xstart+sprite_width+32,ystart+8,5,c_black, c_black);

draw_self();
</string>
          </argument>
        </arguments>
      </action>
    </event>
  </events>
  <PhysicsObject>0</PhysicsObject>
  <PhysicsObjectSensor>0</PhysicsObjectSensor>
  <PhysicsObjectShape>0</PhysicsObjectShape>
  <PhysicsObjectDensity>0.5</PhysicsObjectDensity>
  <PhysicsObjectRestitution>0.100000001490116</PhysicsObjectRestitution>
  <PhysicsObjectGroup>0</PhysicsObjectGroup>
  <PhysicsObjectLinearDamping>0.100000001490116</PhysicsObjectLinearDamping>
  <PhysicsObjectAngularDamping>0.100000001490116</PhysicsObjectAngularDamping>
  <PhysicsObjectFriction>0.200000002980232</PhysicsObjectFriction>
  <PhysicsObjectAwake>-1</PhysicsObjectAwake>
  <PhysicsObjectKinematic>0</PhysicsObjectKinematic>
  <PhysicsShapePoints/>
</object>
