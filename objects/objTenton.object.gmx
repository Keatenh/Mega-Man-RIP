<!--This Document is generated by GameMaker, if you edit it by hand then you do so at your own risk!-->
<object>
  <spriteName>sprTenton</spriteName>
  <solid>0</solid>
  <visible>-1</visible>
  <depth>0</depth>
  <persistent>0</persistent>
  <parentName>prtEnemy</parentName>
  <maskName>&lt;undefined&gt;</maskName>
  <events>
    <event eventtype="0" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>event_inherited();

image_xscale = -1; //default is facing left / change this in creation code if need to face right
healthpointsStart = 10;
healthpoints = healthpointsStart;
contactDamage = 3;
reflectProjectiles = true;

//Enemy specific code
radius = 4 * 16; // radius that MM needs to enter to trigger shooting
canShoot = true;
image_speed = 0;
image_index = 0;
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="3" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>event_inherited();

if !global.frozen and !dead {

    checkGround();
    gravityCheckGround();
    generalCollision();
       
    if instance_exists(prtPlayer) {
        //if player is in range and on the side that Tenton is facing
        if ((distance_to_object(prtPlayer) &lt;= radius)&amp;&amp;(sign(prtPlayer.x-x) == image_xscale)) {
            if canShoot {
                canShoot = false;
                //image_index = 1 + (cooldownTimer div 3);
                image_index = 1;
                image_speed = 1/10;
            }
        }
    }
    
    if !canShoot {
        cooldownTimer += update_rate;
        
        if floor(cooldownTimer) == 69 {
            cooldownTimer = 70;
            //Shoot
            ID = instance_create(x+image_xscale*20, sprite_get_ycenter()-6, objTentonStake);
            ID.image_xscale = image_xscale;
            ID.xspeed = 1.5*ID.image_xscale;
            playSFX(sfxEnemyShootClassic);
            image_index = 8;
            image_speed = 0;
        }
        else if floor(cooldownTimer) == 90 {
            image_index = 9;
        }
        else if floor(cooldownTimer) == 120 {
            image_index = 0;
        }
        else if floor(cooldownTimer) &gt;= 180 {
            canShoot = true;
            cooldownTimer = 0;
        }
    }
    
    //Set the protection of the Met
    if (image_index &gt; 1 &amp;&amp; image_index &lt; 8)
        reflectProjectiles = false;
    else
        reflectProjectiles = true;
        
    x += xspeed * update_rate;
    y += yspeed * update_rate;
}
else {
    if dead {
        cooldownTimer = 0;
        canShoot = true;
        image_index = 0;
    }
}


</string>
          </argument>
        </arguments>
      </action>
    </event>
  </events>
  <PhysicsObject>0</PhysicsObject>
  <PhysicsObjectSensor>0</PhysicsObjectSensor>
  <PhysicsObjectShape>0</PhysicsObjectShape>
  <PhysicsObjectDensity>0.5</PhysicsObjectDensity>
  <PhysicsObjectRestitution>0.100000001490116</PhysicsObjectRestitution>
  <PhysicsObjectGroup>0</PhysicsObjectGroup>
  <PhysicsObjectLinearDamping>0.100000001490116</PhysicsObjectLinearDamping>
  <PhysicsObjectAngularDamping>0.100000001490116</PhysicsObjectAngularDamping>
  <PhysicsObjectFriction>0.200000002980232</PhysicsObjectFriction>
  <PhysicsObjectAwake>-1</PhysicsObjectAwake>
  <PhysicsObjectKinematic>0</PhysicsObjectKinematic>
  <PhysicsShapePoints/>
</object>
